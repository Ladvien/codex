# PostgreSQL Configuration for High-Throughput Vector Operations
# Optimized for HIGH-004: Database Connection Pool Configuration
# Target: >1000 ops/sec with pgvector workloads

# CONNECTIONS AND AUTHENTICATION
# Support for large connection pools and PgBouncer
max_connections = 200                    # Allow for pool + maintenance connections
superuser_reserved_connections = 3       # Reserve for admin tasks
shared_preload_libraries = 'pg_stat_statements'  # For performance monitoring

# MEMORY CONFIGURATION
# Optimized for 32GB RAM system (adjust based on available memory)
shared_buffers = 8GB                     # 25% of total RAM (8GB of 32GB)
effective_cache_size = 24GB              # 75% of total RAM (PostgreSQL + OS cache)
work_mem = 256MB                         # For vector operations and large sorts
maintenance_work_mem = 2GB               # Critical for vector index builds
temp_buffers = 128MB                     # For temporary operations

# VECTOR-SPECIFIC MEMORY SETTINGS
huge_pages = try                         # Use huge pages if available
dynamic_shared_memory_type = posix       # Optimize shared memory

# QUERY PLANNER
random_page_cost = 1.1                   # Assume fast SSD storage
seq_page_cost = 1.0                      # Sequential read cost
cpu_tuple_cost = 0.01                    # CPU processing cost
cpu_index_tuple_cost = 0.005             # Index tuple processing cost
cpu_operator_cost = 0.0025               # Operator processing cost
effective_io_concurrency = 200           # Number of concurrent I/O operations

# PARALLEL QUERY EXECUTION
max_worker_processes = 16                # Total background processes
max_parallel_workers = 12                # Parallel query workers
max_parallel_workers_per_gather = 6      # Per-query parallel workers
max_parallel_maintenance_workers = 4     # For index builds and maintenance
parallel_tuple_cost = 0.1                # Cost of transferring tuple to parallel worker
parallel_setup_cost = 1000               # Cost of setting up parallel query

# WRITE AHEAD LOG (WAL)
wal_buffers = 64MB                       # WAL buffer size
wal_writer_delay = 200ms                 # WAL writer sleep time
commit_delay = 0                         # Group commit delay
commit_siblings = 5                      # Minimum concurrent transactions

# CHECKPOINTS
checkpoint_timeout = 15min               # Maximum time between checkpoints
checkpoint_completion_target = 0.9       # Spread checkpoint I/O
max_wal_size = 2GB                      # Maximum WAL size before checkpoint
min_wal_size = 512MB                    # Minimum WAL size

# ARCHIVING AND REPLICATION
# archive_mode = on                      # Enable if using WAL archiving
# archive_command = '/path/to/archive.sh %p %f'  # Archive command
# max_wal_senders = 3                    # For streaming replication

# VACUUMING AND AUTOVACUUM
# Critical for vector workloads to prevent index bloat
autovacuum = on                          # Enable autovacuum
autovacuum_max_workers = 4               # Number of autovacuum workers
autovacuum_naptime = 30s                 # Time between autovacuum runs
autovacuum_vacuum_threshold = 50         # Minimum number of updated tuples
autovacuum_vacuum_scale_factor = 0.1     # Fraction of table size
autovacuum_analyze_threshold = 50        # Minimum number of inserted/updated/deleted tuples
autovacuum_analyze_scale_factor = 0.05   # Fraction of table size for analyze

# BACKGROUND WRITER
bgwriter_delay = 200ms                   # Background writer sleep time
bgwriter_lru_maxpages = 100             # Maximum pages written per round
bgwriter_lru_multiplier = 2.0           # Multiple of average buffer usage
bgwriter_flush_after = 512kB            # Force OS flush after this amount

# STATEMENT TIMEOUT AND LOCKS
statement_timeout = 300000               # 5 minutes (300 seconds) for vector operations
lock_timeout = 60000                     # 1 minute lock timeout
idle_in_transaction_session_timeout = 600000  # 10 minutes idle timeout
tcp_keepalives_idle = 600               # TCP keepalive idle time (seconds)
tcp_keepalives_interval = 30            # TCP keepalive interval
tcp_keepalives_count = 3                # TCP keepalive count

# LOGGING
logging_collector = on                   # Enable logging
log_destination = 'stderr'               # Log to stderr
log_directory = 'pg_log'                # Log directory
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'  # Log filename pattern
log_rotation_age = 1d                   # Rotate logs daily
log_rotation_size = 100MB               # Rotate when file reaches size
log_truncate_on_rotation = off          # Don't truncate existing logs

# SLOW QUERY LOGGING
log_min_duration_statement = 100        # Log queries taking longer than 100ms
log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '  # Log format
log_lock_waits = on                     # Log lock waits
log_temp_files = 10MB                   # Log temp files larger than 10MB
log_autovacuum_min_duration = 0         # Log all autovacuum activity

# STATISTICS
track_activities = on                    # Track running commands
track_counts = on                       # Track table/index access statistics
track_io_timing = on                    # Track I/O timing statistics
track_functions = pl                    # Track PL/pgSQL function statistics

# CONNECTION POOLING SUPPORT
# These settings work well with PgBouncer
tcp_user_timeout = 30000                # TCP user timeout (30 seconds)
password_encryption = scram-sha-256     # Use strong password encryption

# VECTOR EXTENSION SPECIFIC SETTINGS
# Uncomment and adjust based on your vector workload
# ivfflat.probes = 10                   # Number of probes for IVFFlat index searches

# RESOURCE USAGE LIMITS
temp_file_limit = -1                    # No limit on temporary file size (be careful)
max_files_per_process = 1000           # Maximum open files per process

# OPTIMIZER SETTINGS FOR VECTOR QUERIES
from_collapse_limit = 8                 # FROM list size beyond which subqueries are not collapsed
join_collapse_limit = 8                 # FROM list size beyond which JOIN constructs are not flattened
geqo = on                              # Enable genetic query optimizer
geqo_threshold = 12                    # Use GEQO for queries with this many FROM items

# CLIENT CONNECTION DEFAULTS
default_statistics_target = 100         # Default statistics target for ANALYZE
constraint_exclusion = partition        # Enable constraint exclusion for partitioned tables

# ERROR REPORTING AND LOGGING
log_error_verbosity = default           # terse, default, or verbose messages
log_hostname = off                      # Don't log hostname in log_line_prefix
log_statement = 'none'                  # Log statements: none, ddl, mod, all
log_replication_commands = off          # Don't log replication commands

# LOCALE AND FORMATTING
datestyle = 'iso, mdy'                  # Date style
timezone = 'UTC'                        # Use UTC timezone
default_text_search_config = 'pg_catalog.english'  # Text search configuration

# SHARED LIBRARY EXTENSIONS
# Add any required extensions here
# shared_preload_libraries = 'pg_stat_statements,vector'  # Include vector if needed

# PERFORMANCE MONITORING
# Enable pg_stat_statements for query performance monitoring
pg_stat_statements.max = 10000          # Maximum number of statements tracked
pg_stat_statements.track = all          # Track all statements
pg_stat_statements.save = on            # Save statistics across restarts

# ADDITIONAL MEMORY OPTIMIZATIONS FOR VECTOR WORKLOADS
hash_mem_multiplier = 2.0              # Increase hash table memory
logical_decoding_work_mem = 64MB        # Work memory for logical decoding

# Note: Adjust these settings based on your specific hardware configuration
# Monitor performance and adjust as needed based on actual workload patterns